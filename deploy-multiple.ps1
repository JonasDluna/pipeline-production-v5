# üöÄ Script de Deploy M√∫ltiplo para Vercel (PowerShell)
# Pipeline Production v5 - Sistema Multi-usu√°rios

Write-Host "üöÄ Pipeline Production v5 - Deploy M√∫ltiplo" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan

# Fun√ß√£o para deploy
function Deploy-Project {
    param(
        [string]$Name,
        [string]$EnvType,
        [string]$Description
    )
    
    Write-Host ""
    Write-Host "üîÑ Deploying: $Name" -ForegroundColor Blue
    Write-Host "üìù Description: $Description" -ForegroundColor Yellow
    Write-Host "üåç Environment: $EnvType" -ForegroundColor Yellow
    
    # Configurar vari√°veis de ambiente
    Write-Host "‚öôÔ∏è  Configurando vari√°veis de ambiente..." -ForegroundColor White
    
    try {
        vercel env add VITE_SUPABASE_URL production development preview --value="https://zoadjmecfrnqutaplowj.supabase.co" --yes
        vercel env add VITE_SUPABASE_ANON_KEY production development preview --value="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpvYWRqbWVjZnJucXV0YXBsb3dqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE5MTIyNzksImV4cCI6MjA3NzQ4ODI3OX0.qngho4OVH2I3_kSwk3OiNWyA3Z9cJ1VFkZuX5Sc1xbU" --yes
    }
    catch {
        Write-Host "‚ö†Ô∏è  Vari√°veis podem j√° existir" -ForegroundColor Yellow
    }
    
    # Deploy
    try {
        if ($EnvType -eq "production") {
            vercel --prod --name=$Name
        } else {
            vercel --name=$Name
        }
        
        Write-Host "‚úÖ Deploy successful: $Name" -ForegroundColor Green
        Write-Host "üåê URL: https://$Name.vercel.app" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå Deploy failed: $Name" -ForegroundColor Red
    }
}

# Verificar se Vercel CLI est√° instalado
if (-not (Get-Command vercel -ErrorAction SilentlyContinue)) {
    Write-Host "üì¶ Instalando Vercel CLI..." -ForegroundColor Yellow
    npm install -g vercel
}

# Login na Vercel
Write-Host "üîê Fazendo login na Vercel..." -ForegroundColor Blue
vercel login

# Menu de op√ß√µes
Write-Host ""
Write-Host "üìã Op√ß√µes de Deploy:" -ForegroundColor Blue
Write-Host "1. üåê Deploy Produ√ß√£o (pipeline-production)"
Write-Host "2. üîß Deploy Staging (pipeline-dev)"
Write-Host "3. üé® Deploy Demo (pipeline-demo)"
Write-Host "4. üöÄ Deploy Todos"
Write-Host "5. ‚ùå Cancelar"

$choice = Read-Host "Escolha uma op√ß√£o (1-5)"

switch ($choice) {
    "1" {
        Deploy-Project "pipeline-production" "production" "Vers√£o de produ√ß√£o para uso di√°rio da equipe"
    }
    "2" {
        Deploy-Project "pipeline-dev" "preview" "Vers√£o de desenvolvimento para testes"
    }
    "3" {
        Deploy-Project "pipeline-demo" "development" "Vers√£o para demonstra√ß√µes e apresenta√ß√µes"
    }
    "4" {
        Write-Host ""
        Write-Host "üöÄ Fazendo deploy de todos os ambientes..." -ForegroundColor Blue
        Deploy-Project "pipeline-production" "production" "Vers√£o de produ√ß√£o"
        Deploy-Project "pipeline-dev" "preview" "Vers√£o de desenvolvimento"
        Deploy-Project "pipeline-demo" "development" "Vers√£o demo"
    }
    "5" {
        Write-Host "‚ùå Deploy cancelado" -ForegroundColor Yellow
        exit 0
    }
    default {
        Write-Host "‚ùå Op√ß√£o inv√°lida" -ForegroundColor Red
        exit 1
    }
}

Write-Host ""
Write-Host "üéâ Deploy(s) conclu√≠do(s)!" -ForegroundColor Green
Write-Host "üì± Teste as funcionalidades multi-usu√°rios:" -ForegroundColor Blue
Write-Host "   ‚Ä¢ Abra m√∫ltiplas abas"
Write-Host "   ‚Ä¢ Crie OPs em uma aba" 
Write-Host "   ‚Ä¢ Veja sincroniza√ß√£o em tempo real"
Write-Host "   ‚Ä¢ Compartilhe URLs com a equipe"